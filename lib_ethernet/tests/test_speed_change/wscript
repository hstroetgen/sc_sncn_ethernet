import xwaf.utils.configs as config_utils


def options(ctx):
    ctx.add_option('--config', action='store', default='')


def configure(conf):
    def make_config(name, flags):
        conf.setenv(name)
        conf.load('xwaf.compiler_xcc')
        conf.env.XCC_FLAGS = flags

    for key, value in CONFIGS.iteritems():
        make_config(key, value)


def build(bld):
    if not config_utils.check_build_config(bld, CONFIGS):
        return

    bld.env.PROJECT_ROOT = '../../..'

    depends_on = ['lib_ethernet']

    if 'rt_rgmii' in bld.cmd:
        bld.env.TARGET_ARCH = 'XCORE-200-EXPLORER'
    if 'rt_hp_rgmii' in bld.cmd:
        bld.env.TARGET_ARCH = 'XCORE-200-EXPLORER'
    else:
        bld.env.TARGET_ARCH = 'XK-1A'

    includes = ['../include']
    prog = bld.program(depends_on=depends_on, includes=includes)


CONFIGS = {
    'rt_hp_rgmii': [
        '-g', '-report', '-DDEBUG_PRINT_ENABLE', '-save-temps', '-Os',
        '-Xmapper', '--map', '-Xmapper', 'MAPFILE', '-D__SIMULATOR__=1',
        '-DRT=0', '-DRGMII=1', '-DETHERNET_SUPPORT_HP_QUEUES=1',
        '-fno-xta-info'
    ],
    'rt_rgmii': [
        '-g', '-report', '-DDEBUG_PRINT_ENABLE', '-save-temps', '-Os',
        '-Xmapper', '--map', '-Xmapper', 'MAPFILE', '-D__SIMULATOR__=1',
        '-DRT=0', '-DRGMII=1', '-fno-xta-info'
    ],
}

config_utils.register_configs(CONFIGS)
